{"version":3,"sources":["src/views/UserForm.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACGA,IAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;ADHA,IAAA,QAAA;ACMA,ADNA,ICMM,QAAQ,GAAG,IAAI,UAAA,CAAA,QAAJ,CAAa,QAAQ,CAAC,cAAT,CAAwB,MAAxB,CAAb,CAAjB;AACA,ADPA,OCOO,CAAC,GAAR,CAAY,ADPZ,QCOoB,CAAC,cAAT,CAAwB,MAAxB,CAAZ;AAEA,ADRE,QCQM,CAAC,EDRP,ICQF,IAEA,ADVE,CAAmB,MAAnB,EAAkC;ACYpC,ADZqB,SAAA,MAAA,GAAA,MAAA;ACarB,ADbwC;ACcxC;AAEA,ADdE,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;ACiBF,ADhBI,WAAO,kFAAP;ACkBJ,ADZG,GAPD;ACoBF;AAEA,ADbE,EAAA,QAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;ACcF,ADbI,QAAM,eAAe,GAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAxB;ACcJ,ADbI,IAAA,eAAe,CAAC,SAAhB,GAA4B,KAAK,QAAL,EAA5B;ACcJ,ADZI,IAAA,OAAO,CAAC,GAAR,CAAY,KAAK,MAAjB;ACcJ,ADbI,SAAK,MAAL,CAAY,MAAZ,CAAmB,eAAe,CAAC,OAAnC;ACcJ,ADbG,GAND;ACqBF;AAEA,ADhBA,SAAA,QAAA;ACiBA,ADpCA,CAAA,EAAA;ACqCA;AACA,ADtCa,OAAA,CAAA,QAAA,GAAA,QAAA;ACuCb;AACA;AAEA;AACA;AACA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["export class UserForm {\n  constructor(public parent: Element) {}\n\n  template(): string {\n    return `\n      <div>\n        <h1>User Form</h1>\n        <input />\n      </div>\n    `;\n  }\n\n  render(): void {\n    const templateElement = document.createElement('template');\n    templateElement.innerHTML = this.template();\n\n    console.log(this.parent)\n    this.parent.append(templateElement.content)\n  }\n}","import axios, { AxiosResponse } from 'axios';\nimport { Collection } from './models/Collection';\nimport { User, UserProps } from './models/User';\nimport { UserForm } from './views/UserForm';\n\n\nconst userForm = new UserForm(document.getElementById('root'));\nconsole.log(document.getElementById('root'))\n\nuserForm.render();\n\n// const collection = User.buildUserCollection();\n\n// collection.on('change', () => {\n//   console.log(collection)\n// })\n\n// collection.fetch()\n\n\n// A quick reminder on accessors\n\n// class Person {\n//   constructor(public firstName: string, public lastName: string) {}\n\n//   get fullName(): string {\n//     return `${this.firstName} ${this.lastName}`\n//   }\n// }\n\n// const person = new Person('chris', 'oney');\n// console.log(person.fullName)\n\n// A reminder how \"this\" works in JS\n\n// const colors = {\n//   color: 'red',\n//   printColor() {\n//     console.log(this.color)\n//   }\n// }\n\n// colors.printColor();\n// const newPrintColor = colors.printColor;\n// newPrintColor();"]}